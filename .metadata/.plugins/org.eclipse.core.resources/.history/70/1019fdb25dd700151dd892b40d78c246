package Lab3;

import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Scanner;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;

public class L3Client {
	Socket clientSoc = null, peer = null;
	PrintWriter out = null;
	Scanner in = null;
	String hst, usr;
	int cli = 5556, srv = 5555;
	static MainGameWindow mgw;
	static boolean flag = true;
	static L3Client l3 = null;
	// constructor

	public static void main(String[] args) {

		JFrame j = landingFrame();
		while (flag)
			try {
				Thread.sleep(50);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		j.dispose();

		mgw = new MainGameWindow("LocalHost", l3);

	}

	public static JFrame landingFrame() {
		JFrame f = new JFrame("Connect!");
		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		f.setSize(370, 220);

		JPanel cPane = new JPanel();

		JLabel Cli = new JLabel("Client");
		Cli.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 24));
		cPane.add(Cli);
		JLabel Name = new JLabel("Enter your name:");
		Name.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 18));
		cPane.add(Name);

		JTextField name = new JTextField("", 10);
		cPane.add(name);

		JButton NameButton = new JButton("Join");
		NameButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				String user = name.getText();
				try {
					// int server, String ip, String user
					l3 = new L3Client(5555, "localhost", user);
				} catch (Exception ex) {
					// TODO Auto-generated catch block
					ex.printStackTrace();
				}
				flag = false;
			}

		});
		cPane.add(NameButton);

		f.add(cPane);
		f.setVisible(true);
		return f;
	}

	public L3Client(int server, String ip, String user) {

		hst = ip;
		srv = server;
		usr = user;
		Socket s;
		try {
			s = new Socket("localhost", 5555);
			in = new Scanner(s.getInputStream());
			out = new PrintWriter(s.getOutputStream());
		} catch (Exception e) {
			e.printStackTrace();
		}
		ListenThread l = new ListenThread(usr + "LT", in);
		l.start();

		ParseThread p = new ParseThread(usr + "PT", l, mgw);
		p.start();
	}

	// sends data to the other client in the form of string formated "message X"
	String sendData(String message) {
		try {
			out.println(usr + ":> " + message);
			out.flush();
		} catch (Exception e) {
			return "fail";
		}
		System.out.println(message + " to " + srv);
		return message;

	}
}

class ListenThread extends Thread {

	Scanner in = null;
	ArrayList<String> inputs = new ArrayList<String>();

	public ListenThread(String name, Scanner input) {
		super(name);
		in = input;

	}

	public void run() {

		while (true) {
			if (in.hasNextLine()) {
				String data = in.nextLine();
				if (!(data == null))
					inputs.add(data);
			}
		}
	}

}

class ParseThread extends Thread {
	MainGameWindow mgw;
	ListenThread list;

	public ParseThread(String name, ListenThread listner, MainGameWindow window) {
		super(name);
		list = listner;
		mgw = window;

	}

	public void run() {

		while (true) {

			try {
				Thread.sleep(1);
			} catch (InterruptedException e) {
			}

			if (!list.inputs.isEmpty()) {

				String data = list.inputs.remove(0);

				System.out.println("the data in not null! " + mgw.name);

				mgw.displayReceivedText(data);
			}
		}
	}

}
